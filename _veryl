#compdef veryl

autoload -U is-at-least

_veryl() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_veryl_commands" \
"*::: :->veryl" \
&& ret=0
    case $state in
    (veryl)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:veryl-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':path:_files' \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::path:_files' \
&& ret=0
;;
(fmt)
_arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--check[Run fmt in check mode]' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'*::files -- Target files:_files' \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'*::files -- Target files:_files' \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'*::files -- Target files:_files' \
&& ret=0
;;
(clean)
_arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(publish)
_arguments "${_arguments_options[@]}" : \
'--bump=[Bump version]:BUMP:((major\:"Increment majoir version"
minor\:"Increment minor version"
patch\:"Increment patch version"))' \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(doc)
_arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'*::files -- Target files:_files' \
&& ret=0
;;
(metadata)
_arguments "${_arguments_options[@]}" : \
'--format=[output format]:FORMAT:(pretty json)' \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(dump)
_arguments "${_arguments_options[@]}" : \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--syntax-tree[output syntex tree]' \
'--symbol-table[output symbol table]' \
'--assign-list[output assign list]' \
'--namespace-table[output namespace table]' \
'--type-dag[output type dag]' \
'--attribute-table[output attribute table]' \
'--unsafe-table[output unsafe table]' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'*::files -- Target files:_files' \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
'--sim=[Simulator]:SIM:((verilator\:"Verilator"
vcs\:"Synopsys VCS"
vivado\:"AMD Vivado Simulator"))' \
'--completion=[Generate tab-completion]:COMPLETION:(bash elvish fish powershell zsh)' \
'--wave[Dump waveform]' \
'--quiet[No output printed to stdout]' \
'--verbose[Use verbose output]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
'*::files -- Target files:_files' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_veryl__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:veryl-help-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(fmt)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(clean)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(publish)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(doc)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(metadata)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(dump)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_veryl_commands] )) ||
_veryl_commands() {
    local commands; commands=(
'new:Create a new project' \
'init:Create a new project in an existing directory' \
'fmt:Format the current project' \
'check:Analyze the current project' \
'build:Build the target codes corresponding to the current project' \
'clean:Clean-up the current project' \
'update:Update dependencies' \
'publish:Publish the current project' \
'doc:Build the document corresponding to the current project' \
'metadata:Dump metadata of the current packege' \
'dump:Dump debug info' \
'test:Execute tests' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'veryl commands' commands "$@"
}
(( $+functions[_veryl__build_commands] )) ||
_veryl__build_commands() {
    local commands; commands=()
    _describe -t commands 'veryl build commands' commands "$@"
}
(( $+functions[_veryl__check_commands] )) ||
_veryl__check_commands() {
    local commands; commands=()
    _describe -t commands 'veryl check commands' commands "$@"
}
(( $+functions[_veryl__clean_commands] )) ||
_veryl__clean_commands() {
    local commands; commands=()
    _describe -t commands 'veryl clean commands' commands "$@"
}
(( $+functions[_veryl__doc_commands] )) ||
_veryl__doc_commands() {
    local commands; commands=()
    _describe -t commands 'veryl doc commands' commands "$@"
}
(( $+functions[_veryl__dump_commands] )) ||
_veryl__dump_commands() {
    local commands; commands=()
    _describe -t commands 'veryl dump commands' commands "$@"
}
(( $+functions[_veryl__fmt_commands] )) ||
_veryl__fmt_commands() {
    local commands; commands=()
    _describe -t commands 'veryl fmt commands' commands "$@"
}
(( $+functions[_veryl__help_commands] )) ||
_veryl__help_commands() {
    local commands; commands=(
'new:Create a new project' \
'init:Create a new project in an existing directory' \
'fmt:Format the current project' \
'check:Analyze the current project' \
'build:Build the target codes corresponding to the current project' \
'clean:Clean-up the current project' \
'update:Update dependencies' \
'publish:Publish the current project' \
'doc:Build the document corresponding to the current project' \
'metadata:Dump metadata of the current packege' \
'dump:Dump debug info' \
'test:Execute tests' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'veryl help commands' commands "$@"
}
(( $+functions[_veryl__help__build_commands] )) ||
_veryl__help__build_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help build commands' commands "$@"
}
(( $+functions[_veryl__help__check_commands] )) ||
_veryl__help__check_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help check commands' commands "$@"
}
(( $+functions[_veryl__help__clean_commands] )) ||
_veryl__help__clean_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help clean commands' commands "$@"
}
(( $+functions[_veryl__help__doc_commands] )) ||
_veryl__help__doc_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help doc commands' commands "$@"
}
(( $+functions[_veryl__help__dump_commands] )) ||
_veryl__help__dump_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help dump commands' commands "$@"
}
(( $+functions[_veryl__help__fmt_commands] )) ||
_veryl__help__fmt_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help fmt commands' commands "$@"
}
(( $+functions[_veryl__help__help_commands] )) ||
_veryl__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help help commands' commands "$@"
}
(( $+functions[_veryl__help__init_commands] )) ||
_veryl__help__init_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help init commands' commands "$@"
}
(( $+functions[_veryl__help__metadata_commands] )) ||
_veryl__help__metadata_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help metadata commands' commands "$@"
}
(( $+functions[_veryl__help__new_commands] )) ||
_veryl__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help new commands' commands "$@"
}
(( $+functions[_veryl__help__publish_commands] )) ||
_veryl__help__publish_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help publish commands' commands "$@"
}
(( $+functions[_veryl__help__test_commands] )) ||
_veryl__help__test_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help test commands' commands "$@"
}
(( $+functions[_veryl__help__update_commands] )) ||
_veryl__help__update_commands() {
    local commands; commands=()
    _describe -t commands 'veryl help update commands' commands "$@"
}
(( $+functions[_veryl__init_commands] )) ||
_veryl__init_commands() {
    local commands; commands=()
    _describe -t commands 'veryl init commands' commands "$@"
}
(( $+functions[_veryl__metadata_commands] )) ||
_veryl__metadata_commands() {
    local commands; commands=()
    _describe -t commands 'veryl metadata commands' commands "$@"
}
(( $+functions[_veryl__new_commands] )) ||
_veryl__new_commands() {
    local commands; commands=()
    _describe -t commands 'veryl new commands' commands "$@"
}
(( $+functions[_veryl__publish_commands] )) ||
_veryl__publish_commands() {
    local commands; commands=()
    _describe -t commands 'veryl publish commands' commands "$@"
}
(( $+functions[_veryl__test_commands] )) ||
_veryl__test_commands() {
    local commands; commands=()
    _describe -t commands 'veryl test commands' commands "$@"
}
(( $+functions[_veryl__update_commands] )) ||
_veryl__update_commands() {
    local commands; commands=()
    _describe -t commands 'veryl update commands' commands "$@"
}

if [ "$funcstack[1]" = "_veryl" ]; then
    _veryl "$@"
else
    compdef _veryl veryl
fi
